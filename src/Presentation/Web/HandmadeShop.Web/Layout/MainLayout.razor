@using HandmadeShop.Web.Services
@inherits LayoutComponentBase
@inject IConfigurationService ConfigurationService

<MudThemeProvider @bind-IsDarkMode="_isDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
            
<MudLayout>
    <MudAppBar Class="d-flex justify-content-center align-items-center" Elevation="1">

           <MudLink Href="/" Class="ml-4 mr-4" Color="Color.Inherit" Style="text-decoration: none; font-size: 20px;">Handmade Shop</MudLink>
           <MudButton StartIcon="@(_drawerOpen ? Icons.Material.Filled.Close : Icons.Material.Filled.Menu)"
                      Color="Color.Inherit" IconSize="Size.Large"
                      OnClick="@DrawerToggleAsync">
               Каталог
           </MudButton>
   
           @* <MudItem Class="rounded-circle ml-5"> *@

           @* </MudItem> *@
           
               @* <MudText Align="Align.Center">.rounded-pill</MudText> *@
               <MudTextField
                   @bind-Value="TextValue"
                   Placeholder="Поиск товаров"
                   Class="rounded mr-4 ml-4"
                   Style="@(_isDarkMode ? _sizeStyles : _inputStyles + _sizeStyles)"
                   Variant="Variant.Outlined"
                   Adornment="Adornment.End"
                   AdornmentIcon="@Icons.Material.Filled.Search"
                   AdornmentColor="Color.Secondary"
                   OnAdornmentClick="Search"/>
               
   
           
           @* <MudTextField T="string"  *@
           @*                *@
           @*               Class="rounded-input" *@
           @*               Placeholder="Поиск товаров" *@
           @*               AdornmentIcon="@Icons.Material.Filled.Search" *@
           @*               AdornmentColor="Color.Default" *@
           @*               Variant="Variant.Outlined"/> *@
           
           @* <MudAutocomplete Placeholder="Поиск товаров" *@
           @*                  T="string" *@
           @*                  Immediate="true" *@
           @*                  AdornmentIcon="@Icons.Material.Filled.Search"  *@
           @*                  AdornmentColor="Color.Primary"/> *@
   
           <MudLink Href="/my/favorites">
               <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Style="color: white;" Size="Size.Medium"/>
           </MudLink>
           
           <MudLink Href="/cart">
               <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Style="color: white;" Size="Size.Medium"/>
           </MudLink>
           
           
           <MudDivider Class="mt-2" Style="height: 70%;" DividerType="DividerType.Middle" Vertical="true" FlexItem="true" />
           

           <HeaderMenu/>
           <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" 
                          @onclick="@ToggleDarkModeAsync" 
                          Color="Color.Inherit" 
                          Edge="Edge.End"/>
                   


    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mt-1">Категории</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<MudScrollToTop>
    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ArrowCircleUp" />
</MudScrollToTop>

@code {

    private string _inputStyles = $"background: {Colors.Blue.Lighten5};";
    private string _sizeStyles = "width: 400px; height: 50px";
    public string TextValue { get; set; }
    private bool _resetValueOnEmptyText;
    private bool _coerceText;
    private bool _coerceValue;
    private string value1, value2;
    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
    private bool _drawerOpen = true;
    private bool _isDarkMode;
    
    protected override async Task OnInitializedAsync()
    {
        _drawerOpen = await ConfigurationService.GetNavigationMenuVisibleAsync();
        _isDarkMode = await ConfigurationService.GetDarkModeAsync();
    }
    
    private async Task DrawerToggleAsync()
    {
        _drawerOpen = !_drawerOpen;
        await ConfigurationService.SetNavigationMenuVisibleAsync(_drawerOpen);
    }
    
    private async Task ToggleDarkModeAsync()
    {
        _isDarkMode = !_isDarkMode;
        await ConfigurationService.SetDarkModeAsync(_isDarkMode);
    }

    private async Task Search()
    {
        Console.WriteLine("Search");
    }
}