@using HandmadeShop.Web.Services
@using HandmadeShop.Web.Pages.Basket.Services
@using HandmadeShop.Web.TransferServices
@implements IDisposable
@inherits LayoutComponentBase
@inject IConfigurationService ConfigurationService

<MudThemeProvider @bind-IsDarkMode="_isDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
            
<MudLayout>
    <MudAppBar Class="d-flex justify-content-center align-items-center" Elevation="1">

           <MudLink Href="/" Class="ml-4 mr-4" Color="Color.Inherit" Style="text-decoration: none; font-size: 20px;">Handmade Shop</MudLink>
           
           <MudButton StartIcon="@(_drawerOpen ? Icons.Material.Filled.Close : Icons.Material.Filled.Menu)"
                      Color="Color.Inherit" IconSize="Size.Large"
                      OnClick="@DrawerToggleAsync">
               Каталог
           </MudButton>
           
           @if (!string.IsNullOrEmpty(SearchValueTransferService.Data))
           {
               <MudTextField
                   @bind-Value="@SearchValueTransferService.Data"
                   Placeholder="Поиск товаров"
                   Class="rounded mr-4 ml-4"
                   Style="@(_isDarkMode ? _sizeStyles : _inputStyles + _sizeStyles)"
                   Variant="Variant.Outlined"
                   Adornment="Adornment.End"
                   AdornmentIcon="@Icons.Material.Filled.Search"
                   AdornmentColor="Color.Inherit"
                   OnAdornmentClick="Search"
                   @onkeyup="@OnSearchClick"/>
           }
           else
           {
               <MudTextField
                   @bind-Value="@_searchValue"
                   Placeholder="Поиск товаров"
                   Class="rounded mr-4 ml-4"
                   Style="@(_isDarkMode ? _sizeStyles : _inputStyles + _sizeStyles)"
                   Variant="Variant.Outlined"
                   Adornment="Adornment.End"
                   AdornmentIcon="@Icons.Material.Filled.Search"
                   AdornmentColor="Color.Inherit"
                   OnAdornmentClick="Search"
                   @onkeyup="@OnSearchClick"/>
           }
           
           <MudLink Href="/my/favorites">
               <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Style="color: white;" Size="Size.Medium"/>
           </MudLink>

           <MudLink Href="/basket" Class="badge-container">
              @if (BasketTransferService.Data is null || BasketTransferService.Data.BasketProducts.Count == 0)
              {
                  <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Style="color: white;" Size="Size.Medium"/>
              }
              else
              {
                  <MudBadge Content="@BasketTransferService.Data.BasketProducts.Count" Color="Color.Warning" Overlap="true" Bordered="true" Class="mx-6 my-4">
                      <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart"
                                     Style="color: white; width: 38px; height: 38px" 
                                     Size="Size.Medium"/> 
                  </MudBadge>
              }
           </MudLink>   
           
           <MudDivider Class="mt-2" Style="height: 70%;" DividerType="DividerType.Middle" Vertical="true" FlexItem="true" />
           
           <HeaderMenu/>
           <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" 
                          @onclick="@ToggleDarkModeAsync" 
                          Color="Color.Inherit" 
                          Edge="Edge.End"/>

    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mt-1">Категории</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<MudScrollToTop>
    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ArrowCircleUp" />
</MudScrollToTop>

@code {
    [Inject] BasketTransferService BasketTransferService { get; set; }
    [Inject] SearchValueTransferService SearchValueTransferService { get; set; }
    [Inject] IBasketService BasketService { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    private string _inputStyles = "background: white;";
    private string _sizeStyles = "width: 400px; height: 50px";
    private string _searchValue;
    private bool _processing;
    
    private bool _drawerOpen = true;
    private bool _isDarkMode;
    
    
    protected override async Task OnInitializedAsync()
    {
        _processing = true;
        _drawerOpen = await ConfigurationService.GetNavigationMenuVisibleAsync();
        _isDarkMode = await ConfigurationService.GetDarkModeAsync();
        var data = (await BasketService.GetUserBasketAsync()).Value;
        BasketTransferService.Data = data;
        BasketTransferService.DataChanged += OnBasketChanged;
        SearchValueTransferService.Data = _searchValue;
        SearchValueTransferService.DataChanged += OnSearchValueChanged;
        _processing = false;
    }
    
    private async Task DrawerToggleAsync()
    {
        _drawerOpen = !_drawerOpen;
        await ConfigurationService.SetNavigationMenuVisibleAsync(_drawerOpen);
    }
    
    private async Task ToggleDarkModeAsync()
    {
        _isDarkMode = !_isDarkMode;
        await ConfigurationService.SetDarkModeAsync(_isDarkMode);
    }

    private void OnBasketChanged(object? sender, BasketModel model)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnSearchValueChanged(object? sender, string searchValue)
    {
        InvokeAsync(StateHasChanged);
    }

    private void Search()
    {
        NavigationManager.NavigateTo($"/search?searchValue={_searchValue}", true);
    }

    private void OnSearchClick(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Search();
        }
    }

    public void Dispose()
    {
        BasketTransferService.DataChanged -= OnBasketChanged;
        SearchValueTransferService.DataChanged -= OnSearchValueChanged;
    }
}